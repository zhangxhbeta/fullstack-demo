import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        // TODO To remove after final Spring Boot 2 release
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.21"
    }
}

plugins {
    id "org.sonarqube" version "2.6.2" apply false
    id "net.ltgt.apt-eclipse" version "0.15" apply false
    id "net.ltgt.apt-idea" version "0.15" apply false
    id "net.ltgt.apt" version "0.15" apply false
    id "io.spring.dependency-management" version "1.0.3.RELEASE" apply false
    id "com.moowork.node" version "1.2.0" apply false
}

subprojects { subproject ->
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    assert System.properties['java.specification.version'] == '1.8'

    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'net.ltgt.apt-eclipse'
    apply plugin: 'net.ltgt.apt-idea'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.spring.dependency-management'

    test {
        exclude '**/CucumberTest*'

        // uncomment if the tests reports are not generated
        // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
        // ignoreFailures true
        reports.html.enabled = false
    }

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn test
    }

    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        // TODO To remove after final Spring Boot 2 release
        maven { url "https://repo.spring.io/milestone" }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.6'
    }

    dependencyManagement {
        imports {
            mavenBom 'io.github.jhipster:jhipster-dependencies:' + jhipster_dependencies_version
        }
    }

    // Configuration for spring-boot
    if (subproject.name.endsWith("-web")) {
        apply plugin: 'org.springframework.boot'
        apply plugin: 'war'
        apply plugin: 'com.moowork.node'

        springBoot {
            buildInfo()
        }

        if (OperatingSystem.current().isWindows()) {
            // https://stackoverflow.com/questions/40037487/the-filename-or-extension-is-too-long-error-using-gradle
            task classpathJar(type: Jar) {
                dependsOn configurations.runtime
                appendix = 'classpath'

                doFirst {
                    manifest {
                        attributes 'Class-Path': configurations.runtime.files.collect {
                            it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                        }.join(' ')
                    }
                }
            }

            bootRun {
                dependsOn classpathJar
                doFirst {
                    classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", classpathJar.archivePath)
                }
            }
        }

        apply from: '../gradle/docker.gradle'
        apply from: '../gradle/sonar.gradle'
        apply from: '../gradle/liquibase.gradle'

        if (project.hasProperty('prod')) {
            apply from: '../gradle/profile_prod.gradle'
        } else {
            apply from: '../gradle/profile_dev.gradle'
        }

        if (project.hasProperty('graphite')) {
            apply from: '../gradle/graphite.gradle'
        }

        if (project.hasProperty('prometheus')) {
            apply from: '../gradle/prometheus.gradle'
        }


        task cleanResources(type: Delete) {
            delete 'build/resources'
        }

        task stage(dependsOn: 'bootWar') {
        }

        if (project.hasProperty('nodeInstall')) {
            node {
                version = "${node_version}"
                npmVersion = "${npm_version}"
                yarnVersion = "${yarn_version}"
                download = true
            }
        }

        compileJava.dependsOn processResources
        processResources.dependsOn cleanResources, bootBuildInfo
        bootBuildInfo.mustRunAfter cleanResources
    }

}


